package com.example.mysql.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.example.mysql.repository.BukuRepository;
import com.example.mysql.service.tbl_relasi;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/buku") // This means URL's start with /demo
// , method = RequestMethod.POST, consumes =
// MediaType.APPLICATION_FORM_URLENCODED_VALUE, produces = {
// MediaType.APPLICATION_ATOM_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }

// (after Application path)
public class BukuController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BukuRepository userRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public ResponseEntity<String> addNewUser(@RequestBody tbl_relasi tbl_relasi) {
        tbl_relasi _tbl_relasi = userRepository.findById(tbl_relasi.getKd_kategori());
        if (_tbl_relasi != null) {
            userRepository.save(tbl_relasi);
            return new ResponseEntity<>("Tutorial was Insert successfully.", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Tutorial was Insert Unsuccessfully.", HttpStatus.NOT_FOUND);
        }
    }

    @PutMapping(path = "/update/{id}") // Map ONLY POST Requests
    public ResponseEntity<String> updateUser(@PathVariable("id") String id,
            @RequestBody tbl_relasi tbl_relasi) {

        tbl_relasi _tbl_relasi = userRepository.findById(id);

        if (_tbl_relasi != null) {
            tbl_relasi.setKd_kategori(id);
            userRepository.update(tbl_relasi);
            return new ResponseEntity<>("Tutorial was Updated successfully.", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Tutorial was Updated Unsuccessfully.", HttpStatus.NOT_FOUND);
        }

    }

    @DeleteMapping("delete/{id}")
    public ResponseEntity<String> delUsersById(@PathVariable("id") String id) {
        try {
            String result = userRepository.deleteById(id);
            if (result == "test") {
                return new ResponseEntity<>("Cannot find Tutorial with id=" + id, HttpStatus.OK);
            }
            return new ResponseEntity<>("Tutorial was deleted successfully.", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Cannot delete tutorial.", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    // public @ResponseBody String delUsersById(@PathVariable("id") String id) {
    // // This returns a JSON or XML with the users
    // return userRepository.deleteById(id);
    // }

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<tbl_relasi> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/find/{id}")
    public ResponseEntity<tbl_relasi> findUsersById(@PathVariable("id") String id) {
        // This returns a JSON or XML with the users
        tbl_relasi tbl_relasi = userRepository.findById(id);
        if (tbl_relasi != null) {
            return new ResponseEntity<>(tbl_relasi, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(tbl_relasi, HttpStatus.NOT_FOUND);
        }
    }

}